<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>hello</groupId>
  <artifactId>spring-boot</artifactId>
  <packaging>jar</packaging>
  <version>0.0.1-SNAPSHOT</version>
  
  <properties>
    <!-- Generic properties -->
    <java.version>1.8</java.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <start-class>hello.spring_boot.App</start-class>
  </properties>
  
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.1.10.RELEASE</version>
  </parent>
  
  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <!-- 
        If you are building a web site for your business, you probably need to add some management services.
        Spring Boot provides several out of the box with its actuator module, such as health, audits, beans, and more.
        After start the application, you will see a new set of RESTful end points added to the application.
        These are management services provided by Spring Boot.
        
        It’s easy to check the health of the app.
        curl localhost:8080/actuator/health
        {"status":"UP"}
       -->
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
  </dependencies>
  
  <build>
    <plugins>
      <plugin>
        <!-- 
          The Spring Boot Maven plugin provides many convenient features:
          It collects all the jars on the classpath and builds a single, runnable "über-jar",
            which makes it more convenient to execute and transport your service.
          It searches for the public static void main() method to flag as a runnable class.
          It provides a built-in dependency resolver that sets the version number to match Spring Boot dependencies.
            You can override any version you wish, but it will default to Boot’s chosen set of versions.
         -->
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
</project>